[tool.poetry]
name = "shen-cli"
version = "0.0.0-beta.0"
description = "An AI-powered CLI tool for automating non-programming daily tasks"
authors = ["Shen Jingnan"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/shenjingnan/shen"
repository = "https://github.com/shenjingnan/shen"
keywords = ["cli", "ai", "automation", "productivity", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
]
packages = [
    { include = "shen", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1.7"
rich = "^13.7.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
black = "^23.12.0"
ruff = "^0.1.8"
mypy = "^1.7.1"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
shen = "shen.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39']

[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
target-version = "py39"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --cov=shen --cov-report=term-missing"

[tool.coverage.run]
source = ["src/shen"]
omit = ["*/tests/*", "*/__init__.py"]